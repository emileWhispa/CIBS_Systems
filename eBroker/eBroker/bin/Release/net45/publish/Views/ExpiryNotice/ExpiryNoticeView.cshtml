@model IEnumerable<eBroker.InsurancePolicy>
@using GridMvc.Html
@{
    ViewBag.Title = "Expiry Notice List";
    Layout = "~/Views/Shared/_Layout.cshtml";
    string startDate = ViewBag.StartDate;
    string endDate = ViewBag.EndDate;
}

    <div class="content">
        <div class="modal fade f-modal" id="modal-default">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                        <h4 class="modal-title">Policy info</h4>
                    </div>
                    <div class="modal-body modal-data">

                    </div>
                    <div class="modal-footer">

                    </div>
                </div>
                <!-- /.modal-content -->
            </div>
            <!-- /.modal-dialog -->
        </div>
        <div class="box box-primary">
            <div class="box-header">Expiry Notice List</div>
            <div class="box-body">
                <div class="row">
                    <div class="box-body">
                        <form action="ExpiryNoticeView" method="get" class="form-inline">
                            <div class="row">
                                @*                        <div class="col-sm-2">
                    <span><i class="fa fa-briefcase"></i>@Html.ActionLink(" New Policy", "PolicyInfo")</span>
                </div>*@
                                <div class="col-sm-10">
                                    <div id="custom-search-input">
                                        <div class="input-group">
                                            <input type="text" value="@startDate" name="startDate" id="startDate" autocomplete="off" class="form-control" placeholder="Start Date" />
                                        </div>
                                        <div class="input-group">
                                            <input type="text" value="@endDate" name="endDate" id="endDate" autocomplete="off" class="form-control" placeholder="End Date" />

                                        </div>
                                            <span class="input-group-btn" style="display: inline-block">
                                                <button class="btn btn-info btn-sm" value="Search" type="submit"><i class="fa fa-search"></i></button>
                                            </span>


                                    </div>
                                </div>
                            </div>
                            </form>
                            <div class="table-responsive">
                                <div class="table table-bordered">
                                    @Html.Grid(Model).Named("ga").Columns(col =>
                               {
                                   col.Add(m => m.Id, true);
                                   //col.Add().Titled("Edit").Sanitized(false).Encoded(false).RenderValueAs(m => Html.Bootstrap().ActionLink("Edit", "PolicyInfo").RouteValues(new { Id = m.Id }).PrependIcon("fa fa-pencil-square-o"));
                                   col.Add(m => m.policy_no).Titled("Policy No.");
                                   // col.Add(m => m.policy_type).Titled("Type");
                                   col.Add(m => m.ProductOptionalName).Titled("Product");
                                   col.Add(m => m.PartnerOptionalName).Titled("Insurer");
                                   col.Add(m => m.ClientOptionalName).Titled("Client Name");
                                   col.Add(m => m.ClientOptionalMobile).Titled("Mobile");
                                   col.Add(m => m.effective_dt).Titled("Effective Date").Format("{0:yyyy-MM-dd}");
                                   col.Add(m => m.expiry_dt).Titled("Expiry Date").Format("{0:yyyy-MM-dd}");
                                   col.Add(m => m.net_premium).Titled("Premium").Format("{0:#,##0}");
                                   //col.Add(m => m.renewable).Titled("Renewable");
                                   //col.Add().Sanitized(false).Encoded(false).RenderValueAs(m => Html.ActionLink("View Insurance Policy(ies)", "InsurancePolicy"));
                                   col.Add().Sanitized(false).Encoded(false).RenderValueAs(m => Html.ActionLink("Policy", "PolicyInfo", "Policy", new { Id = m.Id }, new { @class = "edit-button" }));
                                   //col.Add().Sanitized(false).Encoded(false).RenderValueAs(m => Html.Bootstrap().ActionLink("Loan Accounts", "ListPolicyLoan").RouteValues(new { CId = m.Id }).PrependIcon("fa fa-search-plus"));

                               }).Sortable(true)

                                </div>
                                @if (Model.Count() > 0)
                                {
                                    @Html.Bootstrap().ActionLinkButton("Send SMS", "SendSMSNotice", "ExpiryNotice").Class("click-js").PrependIcon("fa fa-envelope-open-o").RouteValues(new { startDate = startDate, endDate = endDate })
                                    @Html.Bootstrap().ActionLinkButton("Excel", "ExportToExcel", "ExpiryNotice").RouteValues(new { startDate = startDate, endDate = endDate }).PrependIcon("fa fa-file-excel-o")

                                }
                            </div>
                    </div>

                </div>
            </div>

        </div>
        <script>
       
            var loading = false;
            $(document).on('click','.click-js',function(e) {
              e.preventDefault();
              if(!loading){
                  loading = true;
                  window.location.href = this.href;
              }
            });
            $('#startDate').datepicker({
                format: "yyyy-mm-dd",
                changeMonth: true,
                changeYear: true,
                yearRange: "-20:+0"
            });

            $('#endDate').datepicker({
                format: "yyyy-mm-dd",
                changeMonth: true,
                changeYear: true,
                yearRange: "-1:+20"
            });
        </script>

    </div>
