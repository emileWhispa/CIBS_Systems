@using eBroker
@using GridMvc.Html
@model IEnumerable<eBroker.Vw_ManualEntry>

@*@{
        ViewBag.Title = "Manual Entries";
    }*@


    <div>
        <div class="box box-primary">
            <div class="box-header with-border">
                <h4>
                    Manual Entry List
                    @Html.Partial("_Filter")
                </h4>
            </div>
            <div class="box-body table-responsive">

                <div class="table table-hover">
                    @Html.Grid(Model).Named("ga").Columns(col =>
                    {
                        col.Add(e => e.Id, true);
                        col.Add(e => e.EntryDate).Titled("Entry Date").Format("{0:yyyy-MM-dd}").Sortable(true).Filterable(true);
                        col.Add(e => e.DebitLedger).Titled("Debit Ledger").Sortable(true).Filterable(true);
                        col.Add(e => e.CreditLedger).Titled("Credit Ledger").Sortable(true).Filterable(true);
                        col.Add(e => e.Amount).Titled("Amount").Sortable(true).Filterable(true);
                        col.Add(e => e.IsoCode).Titled("Currency").Sortable(true).Filterable(true);
//                        col.Add(e => e.Description).Titled("Description").Sortable(true).Filterable(true);
                        col.Add(e => e.CreatedOn).Titled("Created on").Format("{0:dd-MMM-yyyy}").Sortable(true).Filterable(true);
                        col.Add(e => e.UserID).Titled("Created by").Sortable(true).Filterable(true);

                        col.Add(e => e.Reversal).Titled("Reversed?")
                            .Sortable(true).Filterable(true)
                            .Sanitized(false)
                            .Encoded(false)
                            .RenderValueAs(e=>Html.Label(e.Reversal.ToString(),
                                new {@class= e.Reversal ? "label label-warning" : "label label-info" }));

                        col.Add()
                            .Sanitized(false)
                            .Encoded(false)
                            .RenderValueAs(o => Html.ActionLink("Edit", "ManualEntryEdit",
                                new {Id = o.Id},
                                new {@class = "btn btn-primary btn-sm BtnEditManualEntry" }));
                        col.Add()
                            .Sanitized(false)
                            .Encoded(false)
                            .RenderValueAs(o => Html.ActionLink("Reverse", "ReverseManualEntry",
                                new {id = o.Id},
                                new {@class = "btn btn-info btn-sm "}));

                        col.Add()
                            .Sanitized(false)
                            .Encoded(false)
                            .RenderValueAs(o => Html.ActionLink("Print", "ManualEntryReceipt",
                                new { MId = DataEncryption.Encrypt(o.Id) },
                                new {@class = "btn btn-primary btn-sm " }));


                    }).WithPaging(10).Sortable(true).WithMultipleFilters()
                </div>


            </div>
        </div>
    </div>


    <script type="text/javascript">
        
        $(document).on('click',
            '.BtnEditManualEntry',
            function(e) {
                e.preventDefault();
                ViewManualEntry($(this));
            });
        function ViewManualEntry(manentry) {
            $('.myModal').modal();
            var url = manentry.attr('href');
            showLoader();
            $.getJSON(url,
                function (data) {
                    hideLoader();
                    $("#txtID").val(data.Id);
                    $("#txtCreationDate").val(new Date(parseInt(data.EntryDate.substr(6))).toDateString());
                    $("#DebitLedgerGroup").val(data.DebitLedgerGroup);
                    $("#DebitLedgerGroup").change();
                    loadDebitLedgerNumbers(data.DebitLedgerGroup, data.DebitLedgerNo);

                    $("#DebitLedgerNo").val(data.DebitLedgerNo);
                    $("#CreditLedgerGroup").val(data.CreditLedgerGroup);
                    $("#CreditLedgerGroup").change();
                    loadCreditLedgerNumbers(data.CreditLedgerGroup, data.CreditLedgerNo);
                    $("#CreditLedgerNo").val(data.CreditLedgerNo);
                    $("#CurrencyID").val(data.CurrencyID);
                    $("#Amount").val(data.Amount);
                    $("#Description").val(data.Description);
                    $("#ForexId").val(data.ForexId);
                    $("#Reason").val(data.Reason);
                    $("#CreatedOn").val(new Date(parseInt(data.CreatedOn.substr(6))).toDateString());
                    $("#UserID").val(data.UserID);
                });
            loadDebitLedgerNumbers = function (LedgerNo, SelectedValue) {
                $.getJSON("@Url.Action("GetLedger", "ExpenseGL")", { LedgerNo: LedgerNo },
                    function (data) {
                        $('#DebitLedgerNo').empty();
                        $('#DebitLedgerNo').append('<option value="">' + "--Debit Ledger--" + '</option');
                        for (i = 0; i < data.length; i++) {
                            $('#DebitLedgerNo').append('<option value="' +
                                data[i].Value + '">' + data[i].Text + '</option');
                        }
                        var expCatList = document.getElementById('DebitLedgerNo');
                        expCatList.value = SelectedValue;
                    });
            };


            loadCreditLedgerNumbers = function (LedgerNo, SelectedValue) {
                $.getJSON("@Url.Action("GetLedger", "ExpenseGL")", { LedgerNo: LedgerNo },
                    function (data) {
                        $('#CreditLedgerNo').empty();
                        $('#CreditLedgerNo').append('<option value="">' + "--Credit Ledger--" + '</option');
                        for (i = 0; i < data.length; i++) {
                            $('#CreditLedgerNo').append('<option value="' +
                                data[i].Value + '">' + data[i].Text + '</option');
                        }
                        var expCatList = document.getElementById('CreditLedgerNo');
                        expCatList.value = SelectedValue;
                    });
            };
        }
    </script>
